version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: pet-adoption-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: petAdoptionDB
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - pet-adoption-network

  # MongoDB Express (Admin UI)
  mongo-express:
    image: mongo-express:latest
    container_name: pet-adoption-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password123
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    networks:
      - pet-adoption-network

  # Pet Adoption API Server
  api-server:
    build:
      context: .
      target: development
    container_name: pet-adoption-api
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/petAdoptionDB?authSource=admin
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - mongodb
    networks:
      - pet-adoption-network
    command: npm run dev

  # Redis Cache (Optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: pet-adoption-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pet-adoption-network

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: pet-adoption-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-server
    networks:
      - pet-adoption-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  pet-adoption-network:
    driver: bridge

# Development overrides
x-development: &development
  api-server:
    environment:
      NODE_ENV: development
      DEBUG: "true"
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev

# Production overrides
x-production: &production
  api-server:
    build:
      target: production
    environment:
      NODE_ENV: production
      DEBUG: "false"
    volumes:
      - ./logs:/app/logs
    command: node index.js
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

# Use development by default
# To use production: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
